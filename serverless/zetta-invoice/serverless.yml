service: zetta-invoice

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline-scheduler
  - serverless-offline

custom:
  webpackIncludeModules: true
  stage: ${opt:stage, self:provider.stage}
  Invoices: 'Invoices-${self:provider.stage}'
  InvoiceStatuses: 'InvoiceStatuses-${self:provider.stage}'
  Recipients: 'Recipients-${self:provider.stage}'
  CompanyCustomers: 'CompanyCustomers-${self:provider.stage}'
  Plans: 'Plans-${self:provider.stage}'
  serverless-offline:
    port: 8080
    babelOptions:
      presets: ["env"]
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      domain:
        sources:
          - table: ${self:custom.CompanyCustomers}
            sources: [./offline/seeds/companyCustomers.json]
          - table: ${self:custom.Invoices}
            sources: [./offline/seeds/invoices.json]
          - table: ${self:custom.InvoiceStatuses}
            sources: [./offline/seeds/invoiceStatuses.json]
          - table: ${self:custom.Recipients}
            sources: [./offline/seeds/recipients.json]
          - table: ${self:custom.Plans}
            sources: [./offline/seeds/plans.json]

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: eu-central-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:UpdateItem
      Resource:
        - { "Fn::GetAtt": ["CompanyCustomersDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["InvoicesDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["InvoiceStatusesDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["PlansDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["RecipientsDynamoDBTable", "Arn" ] }
  environment:
    CompanyCustomersTable: ${self:custom.CompanyCustomers}
    InvoicesTable: ${self:custom.Invoices}
    InvoiceStatusesTable: ${self:custom.Invoices}
    PlansTable: ${self:custom.Plans}
    RecipientsTable: ${self:custom.Recipients}

functions:
  dibsConfirm:
    handler: src/lambda/dibs.confirm
    events:
      - http:
          path: dibs/confirm
          method: post
  dibsUrl:
    handler: src/lambda/dibs.url
    events:
      - http:
          path: dibs/url
          method: post
  createInvoice:
    handler: src/lambda/invoice.create
    events:
      - http:
          path: /invoice/create
          method: post
          cors: true
  getInvoices:
    handler: src/lambda/invoice.get
    events:
      - http:
          path: /invoice/{companyCustomerId}
          method: get
          cors: true
  sendInvoice:
    handler: src/lambda/invoice.send
    events:
      - http:
          path: /invoice/mail
          method: post
          cors: true
  getInvoiceStatus:
    handler: src/lambda/invoice.getStatuses
    events:
      - http:
          path: /invoice/status/get/{companyCustomerId}/{invoiceId}/
          method: get
          cors: true
  getInvoiceStatuses:
    handler: src/lambda/invoice.getStatuses
    events:
      - http:
          path: /invoice/status/get/{invoiceId}
          method: get
          cors: true
  setInvoiceStatus:
    handler: src/lambda/invoice.setStatus
    events:
      - http:
         path: /invoice/status/set/{status}
         method: post
         cors: true
  createPlan:
    handler: src/lambda/plan.create
    events:
      - http:
         path: /plan/create
         method: post
         cors: true
  createPlanInvoice:
    handler: src/lambda/plan.createInvoice
    events:
      - http:
         path: /charge/plan
         method: post
         cors: true
  createRecipient:
    handler: src/lambda/recipient.create
    events:
      - http:
          path: /recipient/create
          method: post
          cors: true
  getRecipients:
    handler: src/lambda/recipient.get
    events:
      - http:
          path: /recipient/{companyCustomerId}
          method: get
          cors: true
  getPlans:
    handler: src/lambda/plans.get
    events:
      - http:
          path: /plans/{companyCustomerId}
          method: get
          cors: true
  addRecipientToPlan:
    handler: src/lambda/plans.addRecipientToPlan
    events:
      - http:
          path: /plans/recipient/
          method: post
          cors: true
  cronTest:
    handler: src/lambda/cron.main
    events:
      - http:
          path: /plans/test/{epoch}
          method: get
          cors: true
      - schedule: rate(1 hour)
  adyenCheckout:
    handler: src/lambda/adyen.get
    events:
      - http:
          path: /adyen
          method: get
          cors: true


package:
  exclude:
    - node_modules/serverless-dynamodb-local/**
    - node_modules/serverless-offline/**
    - node_modules/serverless-offline-scheduler/**

resources:
  Resources:
    CompanyCustomersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.CompanyCustomers}
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    InvoiceStatusesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.InvoiceStatuses}
        KeySchema:
          - AttributeName: invoiceId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: invoiceId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    InvoicesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.Invoices}
        KeySchema:
          - AttributeName: companyCustomer
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: companyCustomer
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    PlansTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.Plans}
        KeySchema:
          - AttributeName: companyCustomerId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: companyCustomerId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    RecipientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.Recipients}
        KeySchema:
          - AttributeName: companyCustomerId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: companyCustomerId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
