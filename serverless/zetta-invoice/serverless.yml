service: zetta-invoice

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline-scheduler
  - serverless-s3-local
  - serverless-offline

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packager: 'yarn'

  stage: ${opt:stage, self:provider.stage}

  Invoices: 'Invoices-${self:provider.stage}'
  InvoiceStatuses: 'InvoiceStatuses-${self:provider.stage}'
  Recipients: 'Recipients-${self:provider.stage}'
  CompanyCustomers: 'CompanyCustomers-${self:provider.stage}'
  Plans: 'Plans-${self:provider.stage}'
  LadokParseResults: 'LadokParseResults-${self:custom.stage}'
  S3UploadFolder: 'ladok-uploads-${self:custom.stage}'

  serverless-offline:
    port: 8080
    dontPrintOutput: true
  s3:
    port: 8040
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      domain:
        sources:
          - table: ${self:custom.CompanyCustomers}
            sources: [./offline/seeds/companyCustomers.json]
          - table: ${self:custom.Invoices}
            sources: [./offline/seeds/invoices.json]
          - table: ${self:custom.InvoiceStatuses}
            sources: [./offline/seeds/invoiceStatuses.json]
          - table: ${self:custom.Recipients}
            sources: [./offline/seeds/recipients.json]

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-central-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:UpdateItem
      Resource:
        - { "Fn::GetAtt": ["CompanyCustomersDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["InvoicesDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["InvoiceStatusesDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["PlansDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["RecipientsDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["LadokParseResultsTable", "Arn" ] }
    - Effect: Allow
      Action:
        - s3:getObject
      Resource:
        - { "Fn::GetAtt": ["S3UploadBucket", "Arn"] }

  environment:
    CompanyCustomersTable: ${self:custom.CompanyCustomers}
    InvoicesTable: ${self:custom.Invoices}
    InvoiceStatusesTable: ${self:custom.Invoices}
    PlansTable: ${self:custom.Plans}
    RecipientsTable: ${self:custom.Recipients}
    S3UploadFolder: ${self:custom.S3UploadFolder}
    LadokParseResults: ${self:custom.LadokParseResults}

functions:
  dibsConfirm:
    handler: src/lambda/dibs.confirm
    events:
      - http:
          path: dibs/confirm
          method: post
  dibsUrl:
    handler: src/lambda/dibs.url
    events:
      - http:
          path: dibs/url
          method: post

  createInvoice:
    handler: src/lambda/invoice.create
    events:
      - http:
          path: /invoice
          method: post
          cors: true
  updateInvoice:
    handler: src/lambda/invoice.update
    events:
      - http:
          path: /invoice
          method: put
          cors: true
  getInvoices:
    handler: src/lambda/invoice.get
    events:
      - http:
          path: /invoice/{companyCustomerId}/{locked}
          method: get
          cors: true
  lockInvoice:
    handler: src/lambda/invoice.lock
    events:
      - http:
          path: /invoice/lock/
          method: post
          cors: true
  sendInvoice:
    handler: src/lambda/invoice.send
    events:
      - http:
          path: /invoice/mail
          method: post
          cors: true
  removeInvoice:
    handler: src/lambda/invoice.remove
    events:
      - http:
          path: /invoice
          method: delete
          cors: true

  getInvoiceStatus:
    handler: src/lambda/invoice.getStatus
    events:
      - http:
          path: /invoice/status/{companyCustomerId}/{invoiceId}
          method: get
          cors: true
  getInvoiceStatuses:
    handler: src/lambda/invoice.getStatuses
    events:
      - http:
          path: /invoice/status/{invoiceId}
          method: get
          cors: true
  setInvoiceStatus:
    handler: src/lambda/invoice.setStatus
    events:
      - http:
         path: /invoice/status
         method: post
         cors: true

  createRecipient:
    handler: src/lambda/recipient.create
    events:
      - http:
          path: /recipient
          method: post
          cors: true
  updateRecipient:
    handler: src/lambda/recipient.update
    events:
      - http:
          path: /recipient
          method: put
          cors: true
  getRecipient:
    handler: src/lambda/recipient.get
    events:
      - http:
          path: /recipient/{companyCustomerId}/{recipientId}
          method: get
          cors: true
  deleteRecipent:
    handler: src/lambda/recipient.remove
    events:
      - http:
          path: /recipient
          method: delete
          cors: true

  getPlans:
    handler: src/lambda/plans.get
    events:
      - http:
          path: /plans/{companyCustomerId}
          method: get
          cors: true
  savePlan:
    handler: src/lambda/plans.save
    events:
      - http:
          path: /plans
          method: post
          cors: true
  addRecipientToPlan:
    handler: src/lambda/plans.addRecipientToPlan
    events:
      - http:
          path: /plans/recipient/
          method: post
          cors: true
  removePlan:
    handler: src/lambda/plans.remove
    events:
      - http:
          path: /plans
          method: delete
          cors: true

  cronTest:
    handler: src/lambda/cron.main
    events:
      - http:
          path: /plans/test/{epoch}
          method: get
          cors: true
      - schedule: rate(1 hour)
  adyenCheckout:
    handler: src/lambda/adyen.get
    events:
      - http:
          path: /adyen
          method: get
          cors: true

  #This returns the result of all assignment results
  getNewAssignments:
    handler: src/lambda/assignments.getNewAssignments
    events:
      - http:
          path: assignments/{companyCustomerId}
          method: get
          cors: true

  #This is the commit of for all the parsed files
  saveNewAssignments:
    handler: src/lambda/assignments.saveNewAssignments
    events:
      - http:
          path: assignments/
          method: put
          cors: true

  #Should be invoked when a file is uploaded
  parseUploadedFile:
    handler: src/lambda/assignments.parseUploadedFile
    events:
      - http:
          path: ladok/parse
          method: post
          cors: true
      # - s3:
      #     bucket: ladok-uploads-dev
      #     event: s3:ObjectCreated:*

  createCompanyCustomer:
    handler: src/lambda/companyCustomer.create
    events:
      - http:
          path: /companycustomer
          method: post
          cors: true
  # updateCompanyCustomer:
  #   handler: src/lambda/companycustomer.update
  #   events:
  #     - http:
  #         path: /companycustomer
  #         method: put
  #         cors: true
  getCompanyCustomer:
    handler: src/lambda/companyCustomer.get
    events:
      - http:
          path: /companycustomer/{companyCustomerId}/
          method: get
          cors: true
  deleteCompanyCustomer:
    handler: src/lambda/companyCustomer.remove
    events:
      - http:
          path: /companycustomer
          method: delete
          cors: true


package:
  exclude:
    - node_modules/serverless-dynamodb-local/**
    - node_modules/serverless-offline/**
    - node_modules/serverless-offline-scheduler/**
    - node_modules/serverless-s3-local/**

resources:
  Resources:
    CompanyCustomersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.CompanyCustomers}
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    InvoicesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.Invoices}
        KeySchema:
          - AttributeName: companyCustomerId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: companyCustomerId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    InvoiceStatusesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.InvoiceStatuses}
        KeySchema:
          - AttributeName: invoiceId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: invoiceId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    PlansTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.Plans}
        KeySchema:
          - AttributeName: companyCustomerId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: companyCustomerId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    RecipientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.Recipients}
        KeySchema:
          - AttributeName: companyCustomerId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: companyCustomerId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
          - AttributeName: ssn
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: ssn
            KeySchema:
            - AttributeName: ssn
              KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    S3UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.S3UploadFolder}

    LadokParseResultsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.LadokParseResults}
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
