service: operis-billable-time

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

custom:
  webpackIncludeModules: true
  stage: ${opt:stage, self:provider.stage}
  Invoices: 'Invoices-${self:custom.stage}'
  InvoiceStatuses: 'InvoiceStatuses-${self:custom.stage}'
  Recipients: 'Recipients-${self:custom.stage}'
  CompanyCustomers: 'CompanyCustomers-${self:custom.stage}'
  serverless-offline:
    port: 8080
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      domain:
        sources:
          - table: CompanyCustomers
            sources: [./offline/seeds/companyCustomer.json]
          - table: Invoices
            sources: [./offline/seeds/invoices.json]
          - table: InvoiceStatuses
            sources: [./offline/seeds/invoiceStatuses.json]
          - table: Recipients
            sources: [./offline/seeds/recipients.json]

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: eu-central-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:UpdateItem
      Resource:
        - { "Fn::GetAtt": ["InvoicesDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["RecipientsDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["CompanyCustomersDynamoDBTable", "Arn" ] }
  environment:
    InvoicesTable: ${self:custom.Invoices}
    RecipientsTable: ${self:custom.Recipients}
    CompanyCustomersTable: ${self:custom.CompanyCustomers}

functions:
  dibsConfirm:
    handler: src/lambda/dibs.confirm
    events:
      - http:
          path: dibs/confirm
          method: post
          role: callPaymentLambdas
  dibsUrl:
    handler: src/lambda/dibs.url
    events:
      - http:
          path: dibs/url
          method: post
          role: callPaymentLambda
  createPlanInvoice:
    handler: src/lambda/plan.createInvoice
    events:
      - http:
         path: /charge/plan
         method: post
         role: paymentDatabaseManager
         cors: true
  createPlan:
    handler: src/lambda/plan.create
    events:
      - http:
         path: /plan/create
         method: post
         role: paymentDatabaseManager
         cors: true
  confirmPayment:
    handler: src/lambda/invoice.confirm
    events:
      - http:
         path: /invoice/confirm
         method: post
         role: paymentDatabaseManager
         cors: true
  setInvoiceStatus:
    handler: src/lambda/invoice.setStatus
    events:
      - http:
         path: /invoice/status
         method: post
         role: paymentDatabaseManager
         cors: true
  createInvoice:
    handler: src/lambda/invoice.write
    events:
      - http:
          path: /invoice/create
          method: post
          role: paymentDatabaseManager
          cors: true
  sendInvoice:
    handler: src/lambda/invoice.send
    events:
      - http:
          path: /invoice/mail
          method: post
          role: paymentDatabaseManager
          cors: true
  getInvoices:
    handler: src/lambda/invoice.get
    events:
      - http:
          path: /invoice/{companyCustomerId}
          method: get
          role: paymentDatabaseManager
          cors: true
  createRecipient:
    handler: src/lambda/recipient.create
    events:
      - http:
          path: /recipient
          method: post
          role: paymentDatabaseManager
          cors: true
  getRecipients:
    handler: src/lambda/recipient.get
    events:
      - http:
          path: /recipient/{companyCustomerId}
          method: get
          role: paymentDatabaseManager
          cors: true


package:
  exclude:
    - node_modules/serverless-dynamodb-local/**
    - node_modules/serverless-offline/**

resources:
  Resources:
    callPaymentLambdas:
      Type: AWS::IAM::Role
      Properties:
        RoleName: callPaymentLambdas
        Path: "/"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
            - PolicyName: CallPaymentDatabaseManagers
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - logs:CreateLogGroup
                      - logs:CreateLogStream
                      - logs:PutLogEvents
                    Resource:
                      - 'Fn::Join':
                        - ':'
                        -
                          - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                  - Effect: Allow
                    Action:
                      - lambda:InvokeFunction
                    Resource: arn:aws:lambda:eu-central-1:460056602695:function:payment-prod-membrumSavePayment
    paymentDatabaseManager:
      Type: AWS::IAM::Role
      Properties:
        RoleName: paymentDatabaseManager
        Path: "/"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
            - PolicyName: ManagePaymentTable
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - logs:CreateLogGroup
                      - logs:CreateLogStream
                      - logs:PutLogEvents
                    Resource:
                      - 'Fn::Join':
                        - ':'
                        -
                          - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                  - Effect: Allow
                    Action:
                      - dynamodb:*
                    Resource: arn:aws:dynamodb:eu-central-1:460056602695:table/MembrumPaymentStatuses
                  - Effect: Allow
                    Action:
                      - dynamodb:scan
                    Resource: arn:aws:dynamodb:eu-central-1:460056602695:table/MembrumPlans
                  - Effect: Allow
                    Action:
                      - dynamodb:DeleteItem
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:UpdateItem
                      - dynamodb:Query
                    Resource: arn:aws:dynamodb:eu-central-1:460056602695:table/MembrumPaymentStatuses/statusId
                  - Effect: Allow
                    Action:
                      - dynamodb:DeleteItem
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:UpdateItem
                      - dynamodb:Query
                    Resource: arn:aws:dynamodb:eu-central-1:460056602695:table/MembrumPaymentStatuses/index/paymentId
                  - Effect: Allow
                    Action:
                      - dynamodb:*
                    Resource: arn:aws:dynamodb:eu-central-1:460056602695:table/MembrumPayments
                  - Effect: Allow
                    Action:
                      - dynamodb:DeleteItem
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:UpdateItem
                      - dynamodb:Query
                    Resource: arn:aws:dynamodb:eu-central-1:460056602695:table/MembrumPayments/orderId
                  - Effect: Allow
                    Action:
                      - dynamodb:DeleteItem
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:UpdateItem
                      - dynamodb:Query
                    Resource: arn:aws:dynamodb:eu-central-1:460056602695:table/MembrumPayments/index/userId
                  - Effect: Allow
                    Action:
                      - dynamodb:DeleteItem
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:UpdateItem
                      - dynamodb:Query
                    Resource: arn:aws:dynamodb:eu-central-1:460056602695:table/MembrumUsers
    CompanyCustomersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CompanyCustomers
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    InvoicesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Invoices
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: companyCustomer
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: companyCustomer
            KeySchema:
            - AttributeName: companyCustomer
              KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    InvoiceStatusesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: InvoiceStatuses
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    RecipientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Recipients
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: companyCustomer
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: companyCustomer
            KeySchema:
            - AttributeName: companyCustomer
              KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
