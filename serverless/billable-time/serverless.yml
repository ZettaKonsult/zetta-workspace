# NOTE: update this with your service name
service: operis-billable-time

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

# Enable auto-packing of external modules
custom:
  webpackIncludeModules: true
  stage: ${opt:stage, self:provider.stage}
  Invoices: 'Invoices-${self:provider.stage}'
  InvoiceRows: 'InvoiceRows-${self:provider.stage}'
  Recipients: 'Recipients-${self:provider.stage}'
  CompanyCustomer: 'CompanyCustomer-${self:provider.stage}'
  serverless-offline:
    port: 4000
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      domain:
        sources:
          - table: ${self:custom.CompanyCustomer}
            sources: [./offline/seeds/company-customer.json]

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: eu-central-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:UpdateItem
      Resource:
        - { "Fn::GetAtt": ["InvoicesDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["InvoiceRowsDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["RecipientsDynamoDBTable", "Arn" ] }
  environment:
    InvoiceRowsTable: ${self:custom.InvoiceRows}
    InvoicesTable: ${self:custom.Invoices}
    RecipientTable: ${self:custom.Recipients}
    CompanyCustomerTable: ${self:custom.CompanyCustomer}

functions:
  createInvoice:
    handler: src/handler.writeInvoice
    events:
      - http:
          path: /invoice
          method: post
          cors: true
          authorizer: aws_iam
  sendInvoice:
    handler: src/handler.sendInvoice
    events:
      - http:
          path: /invoice/mail
          method: post
          cors: true
          authorizer: aws_iam
  getInvoices:
    handler: src/handler.getInvoices
    events:
      - http:
          path: /invoice/{companyCustomerId}
          method: get
          cors: true
          authorizer: aws_iam
  addBillableRow:
    handler: src/handler.writeBillableRow
    events:
      - http:
          path: /billrow
          method: post
          cors: true
          authorizer: aws_iam
  allBillableRows:
    handler: src/handler.getBillableRows
    events:
      - http:
          path: /billrows/{companyCustomerId}
          method: get
          cors: true
          authorizer: aws_iam
  createRecipient:
    handler: src/handler.createRecipient
    events:
      - http:
          path: /recipient
          method: post
          cors: true
          authorizer: aws_iam
  getRecipients:
    handler: src/handler.getRecipients
    events:
      - http:
          path: /recipient/{companyCustomerId}
          method: get
          cors: true
          authorizer: aws_iam


resources:
  Resources:
    ${file(offline/migrations/companycustomer.yml)}
    ${file(offline/migrations/invoice.yml)}
    ${file(offline/migrations/invoicerow.yml)}
    ${file(offline/migrations/recipient.yml)}

package:
  exclude:
    - node_modules/serverless-dynamodb-local/**
    - node_modules/serverless-offline/**
