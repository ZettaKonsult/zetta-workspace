service: ladokParser

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-s3-local
  - serverless-offline

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packager: 'yarn'

  stage: ${opt:stage, self:provider.stage}
  LadokParseResults: 'LadokParseResults-${self:provider.stage}'
  Recipients: 'Recipients-${self:provider.stage}'

  serverless-offline:
    port: 8080
    babelOptions:
      presets: ["env"]
  s3:
    port: 8040
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: false
    seed:
      domain:
        sources:
          - table: ${self:custom.LadokParseResults}
            sources: [./offline/seeds/ladokParseResults.json]
          - table: ${self:custom.Recipients}
            sources: [./offline/seeds/recipients.json]

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: eu-central-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:UpdateItem
      Resource:
        - { "Fn::GetAtt": ["LadokParseResultsTable", "Arn" ] }
        - { "Fn::Join": [ "", [ "Fn::GetAtt": ["RecipientsTable", "Arn" ], "/index/ssn" ] ] }
        - { "Fn::GetAtt": ["RecipientsTable", "Arn" ] }
    - Effect: Allow
      Action:
        - s3:getObject
      Resource:
        - arn:aws:s3:::ladok-files/*
  environment:
    LadokParseResults: ${self:custom.LadokParseResults}
    Recipients: ${self:custom.Recipients}

dynamodb:Query on resource: arn:aws:dynamodb:eu-central-1:460056602695:table/Recipients-dev/index/ssn

functions:
  getNewAssignments:
    handler: src/lambda/getAssignments.getNewAssignments
    events:
      - http:
          path: assignments/get
          method: get
          cors: true

  saveNewAssignments:
    handler: src/lambda/saveAssignments.saveNewAssignments
    events:
      - http:
          path: assignments/save
          method: put
          cors: true

  parseUploadedFile:
    handler: src/lambda/parse.parseUploadedFile
    events:
      - http:
          path: ladok/parse
          method: post
          cors: true

  testS3:
    handler: src/lambda/stuff.testStuff
    events:
      - s3: local-bucket

package:
  exclude:
    - node_modules/serverless-dynamodb-local/**
    - node_modules/serverless-offline/**

resources:
  Resources:
    NewResource:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: local-bucket
    LadokParseResultsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.LadokParseResults}
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    RecipientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.Recipients}
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: companyCustomer
            AttributeType: S
          - AttributeName: ssn
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: companyCustomer
            KeySchema:
            - AttributeName: companyCustomer
              KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: ssn
            KeySchema:
            - AttributeName: ssn
              KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
